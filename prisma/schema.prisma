// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Core Models
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  role      String   @default("student")
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  students         Student[]
  teachers         Teacher[]
  parents          Parent[]
  staff            Staff[]
  notifications    Notification[]
  messages         Message[]
  eventAttendees   EventAttendee[]
  assignmentSubs   AssignmentSubmission[]
  examResults      ExamResult[]
  attendance       Attendance[]
  grades           Grade[]

  @@map("users")
}

model School {
  id          Int      @id @default(autoincrement())
  name        String
  address     String?
  phone       String?
  email       String?
  website     String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  classes     Class[]
  subjects    Subject[]
  events      Event[]
  forums      Forum[]

  @@map("schools")
}

// Academic Models
model Class {
  id        Int      @id @default(autoincrement())
  name      String
  schoolId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  school     School      @relation(fields: [schoolId], references: [id])
  students   Student[]
  subjects   Subject[]
  attendance Attendance[]

  @@map("classes")
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String
  code        String?
  description String?
  schoolId    Int
  classId     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  school      School       @relation(fields: [schoolId], references: [id])
  class       Class?       @relation(fields: [classId], references: [id])
  assignments Assignment[]
  exams       Exam[]

  @@map("subjects")
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime
  subjectId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject     Subject                    @relation(fields: [subjectId], references: [id])
  submissions AssignmentSubmission[]
  attachments AssignmentAttachment[]

  @@map("assignments")
}

model AssignmentSubmission {
  id           Int      @id @default(autoincrement())
  assignmentId Int
  userId       Int
  content      String?
  grade        Float?
  feedback     String?
  submittedAt  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  assignment  Assignment                        @relation(fields: [assignmentId], references: [id])
  user        User                              @relation(fields: [userId], references: [id])
  attachments AssignmentSubmissionAttachment[]

  @@map("assignment_submissions")
}

model AssignmentAttachment {
  id           Int    @id @default(autoincrement())
  assignmentId Int
  fileName     String
  filePath     String
  fileSize     Int?

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id])

  @@map("assignment_attachments")
}

model AssignmentSubmissionAttachment {
  id           Int    @id @default(autoincrement())
  submissionId Int
  fileName     String
  filePath     String
  fileSize     Int?

  // Relations
  submission AssignmentSubmission @relation(fields: [submissionId], references: [id])

  @@map("assignment_submission_attachments")
}

model Exam {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  duration    Int?
  subjectId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject Subject      @relation(fields: [subjectId], references: [id])
  results ExamResult[]

  @@map("exams")
}

model ExamResult {
  id       Int   @id @default(autoincrement())
  examId   Int
  userId   Int
  score    Float
  maxScore Float @default(100)

  // Relations
  exam Exam @relation(fields: [examId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("exam_results")
}

model Grade {
  id        Int      @id @default(autoincrement())
  userId    Int
  subject   String
  grade     String
  semester  String?
  year      Int?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("grades")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  userId    Int
  classId   Int
  date      DateTime
  status    String   @default("present")
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  class Class @relation(fields: [classId], references: [id])

  @@map("attendance")
}

// Communication Models
model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int?
  subject     String?
  content     String
  isRead      Boolean  @default(false)
  sentAt      DateTime @default(now())

  // Relations
  sender      User                @relation(fields: [senderId], references: [id])
  attachments MessageAttachment[]

  @@map("messages")
}

model MessageAttachment {
  id        Int    @id @default(autoincrement())
  messageId Int
  fileName  String
  filePath  String
  fileSize  Int?

  // Relations
  message Message @relation(fields: [messageId], references: [id])

  @@map("message_attachments")
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  content     String
  type        String   @default("info")
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  location    String?
  schoolId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  school    School          @relation(fields: [schoolId], references: [id])
  attendees EventAttendee[]

  @@map("events")
}

model EventAttendee {
  id      Int @id @default(autoincrement())
  eventId Int
  userId  Int

  // Relations
  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@map("event_attendees")
}

// User Profile Models
model Staff {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  employeeId   String?  @unique
  department   String?
  position     String?
  salary       Float?
  hireDate     DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("staff")
}

model Student {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  studentId    String?  @unique
  classId      Int?
  admissionDate DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id])
  class Class? @relation(fields: [classId], references: [id])

  @@map("students")
}

model Parent {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  occupation  String?
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("parents")
}

model Teacher {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  employeeId  String?  @unique
  department  String?
  specialization String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("teachers")
}

// Forum Models
model Forum {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  schoolId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  school School @relation(fields: [schoolId], references: [id])

  @@map("forums")
}

// Additional Models
model Certificate {
  id          Int      @id @default(autoincrement())
  type        String
  issuedAt    DateTime
  description String?
  createdAt   DateTime @default(now())

  @@map("certificates")
}

model Alumni {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  graduationYear Int
  currentJob    String?
  company       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("alumni")
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("groups")
}

model Plugin {
  id        Int      @id @default(autoincrement())
  name      String
  version   String
  enabled   Boolean  @default(false)
  config    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plugins")
}

model Transport {
  id        Int     @id @default(autoincrement())
  route     String
  driver    String
  capacity  Int
  available Boolean @default(true)

  @@map("transport")
}

model Inventory {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  quantity    Int      @default(0)
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("inventory")
}

model Gamification {
  id          Int      @id @default(autoincrement())
  name        String
  type        String
  points      Int      @default(0)
  badge       String?
  createdAt   DateTime @default(now())

  @@map("gamification")
}

// CBT Models
model CbtSubject {
  id          Int      @id @default(autoincrement())
  name        String
  code        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cbt_subjects")
}

model CbtSession {
  id        Int      @id @default(autoincrement())
  title     String
  duration  Int
  startTime DateTime
  endTime   DateTime?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("cbt_sessions")
}

model CbtQuestion {
  id         Int      @id @default(autoincrement())
  question   String
  optionA    String
  optionB    String
  optionC    String
  optionD    String
  answer     String
  subject    String
  difficulty String   @default("medium")
  createdAt  DateTime @default(now())

  @@map("cbt_questions")
}

model CbtResult {
  id        Int      @id @default(autoincrement())
  studentId Int
  sessionId Int
  subject   String
  score     Float
  total     Int
  percentage Float
  timeSpent Int?
  createdAt DateTime @default(now())

  @@map("cbt_results")
}

model CbtComment {
  id        Int      @id @default(autoincrement())
  resultId  Int
  comment   String
  author    String
  createdAt DateTime @default(now())

  @@map("cbt_comments")
}