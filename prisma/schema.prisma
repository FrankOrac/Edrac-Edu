
// Main Prisma Schema File
// This file contains the complete schema for the EduAI platform
// Generated with ❤️ by the Edrac team

// 1. Configure Prisma Client
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// 2. Configure the database connection
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 3. Define enums for better type safety
enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  STAFF
  LIBRARIAN
  ACCOUNTANT
  RECEPTIONIST
  DRIVER
  INVENTORY_MANAGER
  FORUM_MODERATOR
  FORUM_ADMIN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  HALF_DAY
}

enum AssignmentStatus {
  DRAFT
  SUBMITTED
  LATE
  GRADED
  RESUBMITTED
  EXCUSED
}

// 4. Base Models
model School {
  id                      Int                     @id @default(autoincrement())
  name                    String
  domain                  String                  @unique
  address                 String?
  phone                   String?
  email                   String?
  logo                    String?
  website                 String?
  isActive                Boolean                 @default(true)
  academicYear            String?
  academicTerm            String?
  settings                Json?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  
  // Relations
  users                   User[]
  classes                 Class[]
  subjects                Subject[]
  events                  Event[]
  academicTerms           AcademicTerm[]
  academicYears           AcademicYear[]
  staff                   Staff[]
  students                Student[]
  parents                 Parent[]
  assignments             Assignment[]
  exams                   Exam[]
  grades                  Grade[]
  attendances             Attendance[]
  messages                Message[]
  notifications           Notification[]
  payments                Payment[]
  invoices                Invoice[]
  invoiceItems            InvoiceItem[]
  fees                    Fee[]
  receipts                Receipt[]
  libraries               Library[]
  books                   Book[]
  bookItems               BookItem[]
  libraryMembers          LibraryMember[]
  libraryTransactions     LibraryTransaction[]
  bookReservations        BookReservation[]
  bookRenewals            BookRenewal[]
  libraryFines            LibraryFine[]
  finePayments            FinePayment[]
  transports              Transport[]
  transportTrips          TransportTrip[]
  transportPassengers     TransportPassenger[]
  transportTripPassengers TransportTripPassenger[]
  inventoryItems          InventoryItem[]
  inventoryTransactions   InventoryTransaction[]
  suppliers               Supplier[]
  forums                  Forum[]
  forumCategories         ForumCategory[]
  forumTopics             ForumTopic[]
  forumPosts              ForumPost[]
  forumMembers            ForumMember[]
  forumTopicSubscriptions ForumTopicSubscription[]
  forumPostLikes          ForumPostLike[]
  forumAttachments        ForumAttachment[]
  forumReports            ForumReport[]
  forumNotifications      ForumNotification[]
  analyticsEvents         AnalyticsEvent[]
  reports                 Report[]
  reportSchedules         ReportSchedule[]
  reportExecutions        ReportExecution[]
  analyticsSettings       AnalyticsSettings?
  systemSettings          SystemSettings?
  notificationSettings    NotificationSettings?
  seoSettings             SEOSettings?
  schoolSettings          SchoolSettings?
  classTimetables         ClassTimetable[]
  assignmentSubmissions   AssignmentSubmission[]
  assignmentAttachments   AssignmentAttachment[]
  assignmentSubmissionAttachments AssignmentSubmissionAttachment[]
  examResults             ExamResult[]
  examSections            ExamSection[]
  examQuestions           ExamQuestion[]
  questionOptions         QuestionOption[]
  questionAnswers         QuestionAnswer[]
  questionBanks           QuestionBank[]
  messageAttachments      MessageAttachment[]
  notificationPreferences NotificationPreference[]
  announcements           Announcement[]
  announcementAttachments AnnouncementAttachment[]
  announcementRecipients  AnnouncementRecipient[]
  eventAttendees          EventAttendee[]
  eventReminders          EventReminder[]
  
  @@index([name])
  @@index([domain])
  @@index([isActive])
}

model User {
  id                      Int                     @id @default(autoincrement())
  email                   String                  @unique
  password                String
  firstName               String
  lastName                String
  role                    UserRole
  phone                   String?
  avatar                  String?
  isActive                Boolean                 @default(true)
  lastLogin               DateTime?
  resetToken              String?                 @unique
  resetTokenExpires       DateTime?
  schoolId                Int?
  school                  School?                 @relation(fields: [schoolId], references: [id])
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  
  // Relations
  staff                   Staff?
  student                 Student?
  parent                  Parent?
  sentMessages            Message[]                @relation("SentMessages")
  receivedMessages        Message[]                @relation("ReceivedMessages")
  notifications           Notification[]
  createdEvents           Event[]                  @relation("CreatedEvents")
  createdAssignments      Assignment[]             @relation("CreatedAssignments")
  assignmentFeedback      AssignmentSubmission[]   @relation("AssignmentFeedback")
  createdExams            Exam[]                   @relation("CreatedExams")
  publishedExamResults    ExamResult[]             @relation("PublishedExamResults")
  gradedGrades            Grade[]                  @relation("GradedGrades")
  recordedAttendances     Attendance[]             @relation("RecordedAttendances")
  receivedPayments        Payment[]                @relation("ReceivedPayments")
  madePayments            Payment[]                @relation("MadePayments")
  createdReceipts         Receipt[]                @relation("CreatedReceipts")
  processedTransactions   LibraryTransaction[]     @relation("ProcessedTransactions")
  processedRenewals       BookRenewal[]            @relation("ProcessedRenewals")
  processedFines          LibraryFine[]            @relation("ProcessedFines")
  processedFinePayments   FinePayment[]            @relation("ProcessedFinePayments")
  recordedTripPassengers  TransportTripPassenger[] @relation("RecordedTripPassengers")
  inventoryTransactions   InventoryTransaction[]   @relation("InventoryTransactions")
  forumMember             ForumMember?
  forumPosts              ForumPost[]
  forumTopics             ForumTopic[]
  uploadedAttachments     ForumAttachment[]
  resolvedReports         ForumReport[]            @relation("ResolvedReports")
  createdForumNotifications ForumNotification[]    @relation("CreatedForumNotifications")
  analyticsEvents         AnalyticsEvent[]
  generatedReports        Report[]                 @relation("GeneratedReports")
  createdReportSchedules  ReportSchedule[]         @relation("CreatedReportSchedules")
  updatedReportSchedules  ReportSchedule[]         @relation("UpdatedReportSchedules")
  initiatedReportExecutions ReportExecution[]      @relation("InitiatedReportExecutions")
  notificationPreference  NotificationPreference?
  announcements           Announcement[]
  eventAttendees          EventAttendee[]
  createdQuestionBanks    QuestionBank[]           @relation("CreatedQuestionBanks")
  
  @@index([email])
  @@index([role])
  @@index([schoolId])
  @@index([isActive])
  @@fulltext([firstName, lastName, email])
}

model Staff {
  id          Int         @id @default(autoincrement())
  userId      Int         @unique
  user        User        @relation(fields: [userId], references: [id])
  staffId     String      @unique
  department  String?
  position    String?
  hireDate    DateTime?
  salary      Float?
  qualifications String?
  emergencyContact String?
  emergencyPhone String?
  bio         String?
  schoolId    Int
  school      School      @relation(fields: [schoolId], references: [id])
  
  // Relations
  classTeacher Class[]    @relation("ClassTeacher")
  subjects    Subject[]
  classTimetables ClassTimetable[]
  libraryMemberships LibraryMember[]
  transportTrips TransportTrip[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([schoolId])
  @@index([staffId])
  @@index([department])
  @@index([position])
}

model Student {
  id                Int             @id @default(autoincrement())
  userId            Int             @unique
  user              User            @relation(fields: [userId], references: [id])
  admissionNo       String          @unique
  dateOfBirth       DateTime?
  gender            String?
  bloodGroup        String?
  religion          String?
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  classId           Int?
  class             Class?          @relation(fields: [classId], references: [id])
  parentId          Int?
  parent            Parent?         @relation(fields: [parentId], references: [id])
  schoolId          Int
  school            School          @relation(fields: [schoolId], references: [id])
  
  // Relations
  attendances       Attendance[]
  grades            Grade[]
  assignmentSubmissions AssignmentSubmission[]
  examResults       ExamResult[]
  libraryMemberships LibraryMember[]
  transportPassengers TransportPassenger[]
  questionAnswers   QuestionAnswer[]
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([schoolId])
  @@index([classId])
  @@index([parentId])
  @@index([admissionNo])
  @@index([dateOfBirth])
}

model Parent {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  user         User      @relation(fields: [userId], references: [id])
  occupation   String?
  company      String?
  address      String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  emergencyContact String?
  emergencyPhone String?
  children     Student[]
  schoolId     Int
  school       School    @relation(fields: [schoolId], references: [id])
  
  // Relations
  invoices     Invoice[]
  payments     Payment[]
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([schoolId])
  @@index([occupation])
  @@index([city, state, country])
}

// Academic Models
model AcademicYear {
  id                  Int             @id @default(autoincrement())
  name                String
  startDate           DateTime
  endDate             DateTime
  isCurrent           Boolean         @default(false)
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  terms               AcademicTerm[]
  classes             Class[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@unique([name, schoolId])
  @@index([schoolId])
  @@index([isCurrent])
}

model AcademicTerm {
  id                  Int             @id @default(autoincrement())
  name                String
  code                String
  startDate           DateTime
  endDate             DateTime
  isCurrent           Boolean         @default(false)
  academicYearId      Int
  academicYear        AcademicYear    @relation(fields: [academicYearId], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  classes             Class[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@unique([code, schoolId])
  @@index([academicYearId])
  @@index([schoolId])
  @@index([isCurrent])
}

model Class {
  id                  Int             @id @default(autoincrement())
  name                String
  section             String?
  roomNumber          String?
  capacity            Int?
  isActive            Boolean         @default(true)
  academicYearId      Int
  academicYear        AcademicYear    @relation(fields: [academicYearId], references: [id])
  academicTermId      Int
  academicTerm        AcademicTerm    @relation(fields: [academicTermId], references: [id])
  teacherId           Int?
  teacher             Staff?          @relation("ClassTeacher", fields: [teacherId], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  // Relations
  students            Student[]
  subjects            Subject[]
  assignments         Assignment[]
  exams               Exam[]
  attendances         Attendance[]
  timetables          ClassTimetable[]
  grades              Grade[]
  fees                Fee[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@unique([name, section, academicYearId, schoolId])
  @@index([academicYearId])
  @@index([academicTermId])
  @@index([teacherId])
  @@index([schoolId])
  @@index([isActive])
}

model Subject {
  id                  Int             @id @default(autoincrement())
  name                String
  code                String
  description         String?
  category            String?
  credits             Float?          @default(1.0)
  isActive            Boolean         @default(true)
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  // Relations
  classes             Class[]
  assignments         Assignment[]
  exams               Exam[]
  grades              Grade[]
  timetables          ClassTimetable[]
  teachers            Staff[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@unique([code, schoolId])
  @@index([schoolId])
  @@index([category])
  @@index([isActive])
  @@fulltext([name, description])
}

model ClassTimetable {
  id                  Int             @id @default(autoincrement())
  dayOfWeek           Int
  startTime           String
  endTime             String
  roomNumber          String?
  isActive            Boolean         @default(true)
  classId             Int
  class               Class           @relation(fields: [classId], references: [id])
  subjectId           Int
  subject             Subject         @relation(fields: [subjectId], references: [id])
  teacherId           Int
  teacher             Staff           @relation(fields: [teacherId], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@unique([classId, subjectId, dayOfWeek, startTime, schoolId])
  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
  @@index([schoolId])
  @@index([dayOfWeek])
}

model Assignment {
  id                  Int                     @id @default(autoincrement())
  title               String
  description         String?
  instructions        String?
  dueDate             DateTime
  maxScore            Float
  weight              Float?                  @default(1.0)
  submissionType      String                  @default("file")
  allowLateSubmission Boolean                 @default(false)
  latePenalty         Float?                  @default(0)
  isPublished         Boolean                 @default(false)
  isGraded            Boolean                 @default(false)
  classId             Int
  class               Class                   @relation(fields: [classId], references: [id])
  subjectId           Int
  subject             Subject                 @relation(fields: [subjectId], references: [id])
  createdById         Int
  createdBy           User                    @relation("CreatedAssignments", fields: [createdById], references: [id])
  schoolId            Int
  school              School                  @relation(fields: [schoolId], references: [id])
  
  // Relations
  submissions         AssignmentSubmission[]
  attachments         AssignmentAttachment[]
  grades              Grade[]
  
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  
  @@index([classId])
  @@index([subjectId])
  @@index([createdById])
  @@index([schoolId])
  @@index([dueDate])
  @@index([isPublished])
  @@index([isGraded])
  @@fulltext([title, description, instructions])
}

model AssignmentSubmission {
  id                  Int                         @id @default(autoincrement())
  assignmentId        Int
  assignment          Assignment                  @relation(fields: [assignmentId], references: [id])
  studentId           Int
  student             Student                     @relation(fields: [studentId], references: [id])
  submittedAt         DateTime?
  submissionText      String?
  score               Float?
  feedback            String?
  feedbackAt          DateTime?
  feedbackById        Int?
  feedbackBy          User?                       @relation("AssignmentFeedback", fields: [feedbackById], references: [id])
  status              String                      @default("pending")
  schoolId            Int
  school              School                      @relation(fields: [schoolId], references: [id])
  
  // Relations
  attachments         AssignmentSubmissionAttachment[]
  
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  
  @@unique([assignmentId, studentId])
  @@index([assignmentId])
  @@index([studentId])
  @@index([schoolId])
  @@index([status])
  @@index([feedbackById])
  @@index([submittedAt])
}

model AssignmentAttachment {
  id                  Int                     @id @default(autoincrement())
  assignmentId        Int
  assignment          Assignment              @relation(fields: [assignmentId], references: [id])
  name                String
  url                 String
  type                String?
  size                Int?
  schoolId            Int
  school              School                  @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime                @default(now())
  
  @@index([assignmentId])
  @@index([schoolId])
}

model AssignmentSubmissionAttachment {
  id                  Int                     @id @default(autoincrement())
  submissionId        Int
  submission          AssignmentSubmission    @relation(fields: [submissionId], references: [id])
  name                String
  url                 String
  type                String?
  size                Int?
  schoolId            Int
  school              School                  @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime                @default(now())
  
  @@index([submissionId])
  @@index([schoolId])
}

model Exam {
  id                  Int             @id @default(autoincrement())
  title               String
  description         String?
  instructions        String?
  startDate           DateTime
  endDate             DateTime
  duration            Int?
  maxScore            Float
  passingScore        Float?
  weight              Float?          @default(1.0)
  isPublished         Boolean         @default(false)
  allowCalculator     Boolean         @default(false)
  allowDictionary     Boolean         @default(false)
  allowNotes          Boolean         @default(false)
  examType            String?
  location            String?
  roomNumber          String?
  classId             Int
  class               Class           @relation(fields: [classId], references: [id])
  subjectId           Int
  subject             Subject         @relation(fields: [subjectId], references: [id])
  createdById         Int
  createdBy           User            @relation("CreatedExams", fields: [createdById], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  // Relations
  results             ExamResult[]
  examSections        ExamSection[]
  questionBanks       QuestionBank[]  @relation("ExamQuestionBanks")
  grades              Grade[]
  questionAnswers     QuestionAnswer[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@index([classId])
  @@index([subjectId])
  @@index([createdById])
  @@index([schoolId])
  @@index([startDate])
  @@index([endDate])
  @@index([examType])
  @@fulltext([title, description, instructions])
}

model ExamSection {
  id                  Int             @id @default(autoincrement())
  name                String
  description         String?
  instructions        String?
  sequence            Int
  maxScore            Float
  passScore           Float?
  examId              Int
  exam                Exam            @relation(fields: [examId], references: [id])
  questionBankId      Int?
  questionBank        QuestionBank?   @relation(fields: [questionBankId], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  // Relations
  questions           ExamQuestion[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@index([examId])
  @@index([questionBankId])
  @@index([schoolId])
  @@index([sequence])
}

model ExamQuestion {
  id                  Int             @id @default(autoincrement())
  questionText        String
  questionType        String
  marks               Float
  difficulty          String?
  category            String?
  sectionId           Int
  section             ExamSection     @relation(fields: [sectionId], references: [id])
  questionBankId      Int?
  questionBank        QuestionBank?   @relation(fields: [questionBankId], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  // Relations
  options             QuestionOption[]
  answers             QuestionAnswer[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@index([sectionId])
  @@index([questionBankId])
  @@index([schoolId])
  @@index([questionType])
  @@index([difficulty])
  @@index([category])
  @@fulltext([questionText])
}

model QuestionOption {
  id                  Int             @id @default(autoincrement())
  optionText          String
  isCorrect           Boolean         @default(false)
  sequence            Int
  questionId          Int
  question            ExamQuestion    @relation(fields: [questionId], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@index([questionId])
  @@index([schoolId])
  @@index([isCorrect])
}

model QuestionAnswer {
  id                  Int             @id @default(autoincrement())
  answerText          String?
  score               Float?
  feedback            String?
  questionId          Int
  question            ExamQuestion    @relation(fields: [questionId], references: [id])
  studentId           Int
  student             Student         @relation(fields: [studentId], references: [id])
  examId              Int
  exam                Exam            @relation(fields: [examId], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@unique([questionId, studentId, examId])
  @@index([questionId])
  @@index([studentId])
  @@index([examId])
  @@index([schoolId])
}

model QuestionBank {
  id                  Int             @id @default(autoincrement())
  name                String
  description         String?
  isPublic            Boolean         @default(false)
  createdById         Int
  createdBy           User            @relation("CreatedQuestionBanks", fields: [createdById], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  // Relations
  questions           ExamQuestion[]
  exams               Exam[]          @relation("ExamQuestionBanks")
  examSections        ExamSection[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@index([createdById])
  @@index([schoolId])
  @@index([isPublic])
  @@fulltext([name, description])
}

model ExamResult {
  id                  Int             @id @default(autoincrement())
  examId              Int
  exam                Exam            @relation(fields: [examId], references: [id])
  studentId           Int
  student             Student         @relation(fields: [studentId], references: [id])
  totalScore          Float
  maxScore            Float
  percentage          Float
  grade               String?
  remarks             String?
  isAbsent            Boolean         @default(false)
  isPublished         Boolean         @default(false)
  publishedAt         DateTime?
  publishedById       Int?
  publishedBy         User?           @relation("PublishedExamResults", fields: [publishedById], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@unique([examId, studentId])
  @@index([examId])
  @@index([studentId])
  @@index([schoolId])
  @@index([isAbsent])
  @@index([isPublished])
  @@index([publishedById])
}

model Grade {
  id                  Int             @id @default(autoincrement())
  studentId           Int
  student             Student         @relation(fields: [studentId], references: [id])
  classId             Int
  class               Class           @relation(fields: [classId], references: [id])
  subjectId           Int
  subject             Subject         @relation(fields: [subjectId], references: [id])
  grade               String
  score               Float
  maxScore            Float
  weight              Float           @default(1.0)
  term                String
  academicYear        String
  isFinal             Boolean         @default(false)
  remarks             String?
  gradedById          Int
  gradedBy            User            @relation("GradedGrades", fields: [gradedById], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  // Relations
  assignmentId         Int?
  assignment          Assignment?     @relation(fields: [assignmentId], references: [id])
  examId              Int?
  exam                Exam?           @relation(fields: [examId], references: [id])
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@unique([studentId, classId, subjectId, term, academicYear, assignmentId, examId])
  @@index([studentId])
  @@index([classId])
  @@index([subjectId])
  @@index([schoolId])
  @@index([term])
  @@index([academicYear])
  @@index([assignmentId])
  @@index([examId])
  @@index([gradedById])
  @@index([isFinal])
}

model Attendance {
  id                  Int             @id @default(autoincrement())
  date                DateTime
  status              String
  notes               String?
  studentId           Int
  student             Student         @relation(fields: [studentId], references: [id])
  classId             Int
  class               Class           @relation(fields: [classId], references: [id])
  recordedById        Int
  recordedBy          User            @relation("RecordedAttendances", fields: [recordedById], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@unique([studentId, classId, date])
  @@index([studentId])
  @@index([classId])
  @@index([recordedById])
  @@index([schoolId])
  @@index([date])
  @@index([status])
}

// Communication Models
model Message {
  id                  Int             @id @default(autoincrement())
  subject             String
  content             String
  isRead              Boolean         @default(false)
  isStarred           Boolean         @default(false)
  isDeletedBySender   Boolean         @default(false)
  isDeletedByReceiver Boolean         @default(false)
  senderId            Int
  sender              User            @relation("SentMessages", fields: [senderId], references: [id])
  receiverId          Int
  receiver            User            @relation("ReceivedMessages", fields: [receiverId], references: [id])
  parentMessageId     Int?
  parentMessage       Message?        @relation("MessageReplies", fields: [parentMessageId], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  // Relations
  replies             Message[]       @relation("MessageReplies")
  attachments         MessageAttachment[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@index([senderId])
  @@index([receiverId])
  @@index([parentMessageId])
  @@index([schoolId])
  @@index([isRead])
  @@index([isStarred])
  @@fulltext([subject, content])
}

model MessageAttachment {
  id                  Int             @id @default(autoincrement())
  messageId           Int
  message             Message         @relation(fields: [messageId], references: [id])
  name                String
  url                 String
  type                String?
  size                Int?
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  
  @@index([messageId])
  @@index([schoolId])
}

model Notification {
  id                  Int             @id @default(autoincrement())
  title               String
  message             String
  isRead              Boolean         @default(false)
  notificationType    String
  relatedId           Int?
  userId              Int
  user                User            @relation(fields: [userId], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@index([userId])
  @@index([schoolId])
  @@index([isRead])
  @@index([notificationType])
  @@index([createdAt])
  @@fulltext([title, message])
}

model NotificationPreference {
  id                  Int             @id @default(autoincrement())
  userId              Int             @unique
  user                User            @relation(fields: [userId], references: [id])
  emailEnabled        Boolean         @default(true)
  pushEnabled         Boolean         @default(true)
  smsEnabled          Boolean         @default(false)
  emailFrequency      String          @default("immediate")
  notificationTypes   Json?
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@index([schoolId])
}

model Announcement {
  id                  Int             @id @default(autoincrement())
  title               String
  content             String
  isPublished         Boolean         @default(false)
  publishedAt         DateTime?
  expiresAt           DateTime?
  authorId            Int
  author              User            @relation(fields: [authorId], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  // Relations
  attachments         AnnouncementAttachment[]
  recipients          AnnouncementRecipient[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@index([authorId])
  @@index([schoolId])
  @@index([isPublished])
  @@index([publishedAt])
  @@index([expiresAt])
  @@fulltext([title, content])
}

model AnnouncementAttachment {
  id                  Int             @id @default(autoincrement())
  announcementId      Int
  announcement        Announcement    @relation(fields: [announcementId], references: [id])
  name                String
  url                 String
  type                String?
  size                Int?
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  
  @@index([announcementId])
  @@index([schoolId])
}

model AnnouncementRecipient {
  id                  Int             @id @default(autoincrement())
  announcementId      Int
  announcement        Announcement    @relation(fields: [announcementId], references: [id])
  recipientType       String
  recipientId         Int?
  isRead              Boolean         @default(false)
  readAt              DateTime?
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@unique([announcementId, recipientType, recipientId])
  @@index([announcementId])
  @@index([recipientType])
  @@index([recipientId])
  @@index([schoolId])
  @@index([isRead])
}

model Event {
  id                  Int             @id @default(autoincrement())
  title               String
  description         String?
  location            String?
  startDate           DateTime
  endDate             DateTime
  isAllDay            Boolean         @default(false)
  isRecurring         Boolean         @default(false)
  recurrenceRule      String?
  color               String?
  isPublic            Boolean         @default(false)
  createdById         Int
  createdBy           User            @relation("CreatedEvents", fields: [createdById], references: [id])
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  // Relations
  attendees           EventAttendee[]
  reminders           EventReminder[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@index([createdById])
  @@index([schoolId])
  @@index([startDate])
  @@index([endDate])
  @@index([isPublic])
  @@fulltext([title, description, location])
}

model EventAttendee {
  id                  Int             @id @default(autoincrement())
  eventId             Int
  event               Event           @relation(fields: [eventId], references: [id])
  userId              Int
  user                User            @relation(fields: [userId], references: [id])
  status              String          @default("pending")
  notes               String?
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@index([schoolId])
  @@index([status])
}

model EventReminder {
  id                  Int             @id @default(autoincrement())
  eventId             Int
  event               Event           @relation(fields: [eventId], references: [id])
  reminderType        String
  minutesBefore       Int
  isSent              Boolean         @default(false)
  sentAt              DateTime?
  schoolId            Int
  school              School          @relation(fields: [schoolId], references: [id])
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  @@index([eventId])
  @@index([schoolId])
  @@index([isSent])
  @@index([reminderType])
}

// Finance Models
model Payment {
  id              Int           @id @default(autoincrement())
  invoiceId       Int?
  invoice         Invoice?      @relation(fields: [invoiceId], references: [id])
  amount          Float
  paymentMethod   String
  transactionId   String?       @unique
  paymentDate     DateTime
  receivedById    Int
  receivedBy      User          @relation("ReceivedPayments", fields: [receivedById], references: [id])
  payerId         Int
  payer           User          @relation("MadePayments", fields: [payerId], references: [id])
  notes           String?
  status          String        @default("pending")
  schoolId        Int
  school          School        @relation(fields: [schoolId], references: [id])
  receipts        Receipt[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([invoiceId])
  @@index([receivedById])
  @@index([payerId])
  @@index([schoolId])
  @@index([paymentDate])
  @@index([status])
}

model Invoice {
  id              Int           @id @default(autoincrement())
  invoiceNo       String        @unique
  studentId       Int?
  student         Student?      @relation(fields: [studentId], references: [id])
  parentId        Int?
  parent          Parent?       @relation(fields: [parentId], references: [id])
  dueDate         DateTime
  issueDate       DateTime      @default(now())
  status          String        @default("unpaid")
  subtotal        Float
  taxAmount       Float         @default(0)
  discountAmount  Float         @default(0)
  total           Float
  notes           String?
  terms           String?
  schoolId        Int
  school          School        @relation(fields: [schoolId], references: [id])
  items           InvoiceItem[]
  payments        Payment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([studentId])
  @@index([parentId])
  @@index([schoolId])
  @@index([dueDate])
  @@index([status])
}

model InvoiceItem {
  id              Int           @id @default(autoincrement())
  invoiceId       Int
  invoice         Invoice       @relation(fields: [invoiceId], references: [id])
  description     String
  quantity        Float         @default(1)
  unitPrice       Float
  taxRate         Float?        @default(0)
  discountAmount  Float?        @default(0)
  total           Float
  schoolId        Int
  school          School        @relation(fields: [schoolId], references: [id])
  feeId           Int?
  fee             Fee?          @relation(fields: [feeId], references: [id])
  createdAt       DateTime      @default(now())
  
  @@index([invoiceId])
  @@index([schoolId])
  @@index([feeId])
}

model Fee {
  id              Int             @id @default(autoincrement())
  name            String
  description     String?
  amount          Float
  taxInclusive    Boolean         @default(false)
  taxRate         Float?          @default(0)
  frequency       String          @default("one_time")
  dueDate         DateTime?
  isActive        Boolean         @default(true)
  schoolId        Int
  school          School          @relation(fields: [schoolId], references: [id])
  classId         Int?
  class           Class?          @relation(fields: [classId], references: [id])
  invoiceItems    InvoiceItem[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([schoolId])
  @@index([classId])
  @@index([isActive])
  @@index([dueDate])
}

model Receipt {
  id              Int           @id @default(autoincrement())
  receiptNo       String        @unique
  paymentId       Int
  payment         Payment       @relation(fields: [paymentId], references: [id])
  receiptDate     DateTime      @default(now())
  receivedFrom    String
  amount          Float
  paymentMethod   String
  notes           String?
  schoolId        Int
  school          School        @relation(fields: [schoolId], references: [id])
  createdById     Int
  createdBy       User          @relation("CreatedReceipts", fields: [createdById], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([paymentId])
  @@index([schoolId])
  @@index([createdById])
  @@index([receiptDate])
}

// Library Models
model Library {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  location    String?
  schoolId    Int
  school      School            @relation(fields: [schoolId], references: [id])
  books       Book[]
  members     LibraryMember[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([schoolId])
}

model Book {
  id              Int                 @id @default(autoincrement())
  title           String
  author          String
  isbn            String?             @unique
  publisher       String?
  publicationYear Int?
  edition         String?
  category        String?
  description     String?
  coverImage      String?
  totalCopies     Int                 @default(1)
  availableCopies Int
  schoolId        Int
  school          School              @relation(fields: [schoolId], references: [id])
  items           BookItem[]
  transactions    LibraryTransaction[]
  reservations    BookReservation[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([schoolId])
  @@index([author])
  @@index([category])
}

model BookItem {
  id              Int                 @id @default(autoincrement())
  bookId          Int
  book            Book                @relation(fields: [bookId], references: [id])
  barcode         String?             @unique
  status          String              @default("available")
  condition       String?
  acquisitionDate DateTime?           @default(now())
  acquisitionCost Float?
  notes           String?
  schoolId        Int
  school          School              @relation(fields: [schoolId], references: [id])
  transactions    LibraryTransaction[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([bookId])
  @@index([schoolId])
  @@index([status])
}

model LibraryMember {
  id              Int                 @id @default(autoincrement())
  studentId       Int?
  student         Student?            @relation(fields: [studentId], references: [id])
  staffId         Int?
  staff           Staff?              @relation(fields: [staffId], references: [id])
  libraryId       Int
  library         Library             @relation(fields: [libraryId], references: [id])
  memberId        String              @unique
  joinDate        DateTime            @default(now())
  expiryDate      DateTime?
  status          String              @default("active")
  maxCheckoutLimit Int?               @default(5)
  schoolId        Int
  school          School              @relation(fields: [schoolId], references: [id])
  transactions    LibraryTransaction[]
  reservations    BookReservation[]
  fines           LibraryFine[]
  renewals        BookRenewal[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([studentId])
  @@index([staffId])
  @@index([libraryId])
  @@index([schoolId])
  @@index([status])
  @@index([expiryDate])
}

model LibraryTransaction {
  id              Int                 @id @default(autoincrement())
  bookItemId      Int
  bookItem        BookItem            @relation(fields: [bookItemId], references: [id])
  bookId          Int
  book            Book                @relation(fields: [bookId], references: [id])
  memberId        Int
  member          LibraryMember       @relation(fields: [memberId], references: [id])
  checkoutDate    DateTime            @default(now())
  dueDate         DateTime
  returnDate      DateTime?
  status          String
  fineAmount      Float?              @default(0)
  finePaid        Boolean             @default(false)
  notes           String?
  processedById   Int
  processedBy     User                @relation("ProcessedTransactions", fields: [processedById], references: [id])
  schoolId        Int
  school          School              @relation(fields: [schoolId], references: [id])
  renewals        BookRenewal[]
  fine            LibraryFine[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([bookItemId])
  @@index([bookId])
  @@index([memberId])
  @@index([schoolId])
  @@index([status])
  @@index([dueDate])
  @@index([returnDate])
}

model BookReservation {
  id              Int                 @id @default(autoincrement())
  bookId          Int
  book            Book                @relation(fields: [bookId], references: [id])
  memberId        Int
  member          LibraryMember       @relation(fields: [memberId], references: [id])
  reservationDate DateTime            @default(now())
  expiryDate      DateTime
  status          String              @default("pending")
  notes           String?
  schoolId        Int
  school          School              @relation(fields: [schoolId], references: [id])
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([bookId])
  @@index([memberId])
  @@index([schoolId])
  @@index([status])
  @@index([expiryDate])
}

model BookRenewal {
  id                  Int                 @id @default(autoincrement())
  transactionId       Int
  transaction         LibraryTransaction  @relation(fields: [transactionId], references: [id])
  memberId            Int
  member              LibraryMember       @relation(fields: [memberId], references: [id])
  renewalDate         DateTime            @default(now())
  previousDueDate     DateTime
  newDueDate          DateTime
  renewedById         Int
  renewedBy           User                @relation("ProcessedRenewals", fields: [renewedById], references: [id])
  schoolId            Int
  school              School              @relation(fields: [schoolId], references: [id])
  createdAt           DateTime            @default(now())
  
  @@index([transactionId])
  @@index([memberId])
  @@index([schoolId])
  @@index([newDueDate])
}

model LibraryFine {
  id              Int                 @id @default(autoincrement())
  transactionId   Int
  transaction     LibraryTransaction  @relation(fields: [transactionId], references: [id])
  memberId        Int
  member          LibraryMember       @relation(fields: [memberId], references: [id])
  fineDate        DateTime            @default(now())
  amount          Float
  reason          String
  status          String              @default("unpaid")
  paidAmount      Float?              @default(0)
  paidDate        DateTime?
  notes           String?
  processedById   Int
  processedBy     User                @relation("ProcessedFines", fields: [processedById], references: [id])
  schoolId        Int
  school          School              @relation(fields: [schoolId], references: [id])
  payments        FinePayment[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([transactionId])
  @@index([memberId])
  @@index([schoolId])
  @@index([status])
  @@index([fineDate])
}

model FinePayment {
  id              Int                 @id @default(autoincrement())
  fineId          Int
  fine            LibraryFine         @relation(fields: [fineId], references: [id])
  amount          Float
  paymentDate     DateTime            @default(now())
  paymentMethod   String
  transactionId   String?             @unique
  notes           String?
  processedById   Int
  processedBy     User                @relation("ProcessedFinePayments", fields: [processedById], references: [id])
  schoolId        Int
  school          School              @relation(fields: [schoolId], references: [id])
  receiptNo       String?             @unique
  createdAt       DateTime            @default(now())
  
  @@index([fineId])
  @@index([schoolId])
  @@index([paymentDate])
}

// Transport Models
model Transport {
  id              Int                     @id @default(autoincrement())
  name            String
  description     String?
  vehicleNo       String
  driverName      String
  driverPhone     String?
  capacity        Int
  route           String?
  status          String                  @default("active")
  schoolId        Int
  school          School                  @relation(fields: [schoolId], references: [id])
  trips           TransportTrip[]
  passengers      TransportPassenger[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  
  @@index([schoolId])
  @@index([status])
  @@index([vehicleNo])
}

model TransportTrip {
  id              Int                     @id @default(autoincrement())
  tripType        String
  startTime       DateTime
  endTime         DateTime
  startLocation   String
  endLocation     String
  status          String                  @default("scheduled")
  transportId     Int
  transport       Transport               @relation(fields: [transportId], references: [id])
  driverId        Int?
  driver          Staff?                  @relation(fields: [driverId], references: [id])
  schoolId        Int
  school          School                  @relation(fields: [schoolId], references: [id])
  passengers      TransportTripPassenger[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  
  @@index([transportId])
  @@index([driverId])
  @@index([schoolId])
  @@index([status])
  @@index([startTime])
}

model TransportPassenger {
  id              Int                     @id @default(autoincrement())
  studentId       Int
  student         Student                 @relation(fields: [studentId], references: [id])
  transportId     Int
  transport       Transport               @relation(fields: [transportId], references: [id])
  pickupPoint     String
  dropoffPoint    String
  status          String                  @default("active")
  startDate       DateTime                @default(now())
  endDate         DateTime?
  notes           String?
  schoolId        Int
  school          School                  @relation(fields: [schoolId], references: [id])
  trips           TransportTripPassenger[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  
  @@unique([studentId, transportId])
  @@index([studentId])
  @@index([transportId])
  @@index([schoolId])
  @@index([status])
}

model TransportTripPassenger {
  id                  Int                 @id @default(autoincrement())
  tripId              Int
  trip                TransportTrip       @relation(fields: [tripId], references: [id])
  passengerId         Int
  passenger           TransportPassenger  @relation(fields: [passengerId], references: [id])
  pickupStatus        String              @default("scheduled")
  dropoffStatus       String?
  pickupTime          DateTime?
  dropoffTime         DateTime?
  notes               String?
  recordedById        Int
  recordedBy          User                @relation("RecordedTripPassengers", fields: [recordedById], references: [id])
  schoolId            Int
  school              School              @relation(fields: [schoolId], references: [id])
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  @@unique([tripId, passengerId])
  @@index([tripId])
  @@index([passengerId])
  @@index([schoolId])
  @@index([pickupStatus])
  @@index([dropoffStatus])
}

model InventoryItem {
  id              Int                     @id @default(autoincrement())
  name            String
  description     String?
  sku             String?                 @unique
  barcode         String?                 @unique
  quantity        Int                     @default(0)
  minQuantity     Int?                    @default(0)
  unit            String?                 @default("pcs")
  unitPrice       Float?                  @default(0)
  category        String?
  location        String?
  isActive        Boolean                 @default(true)
  schoolId        Int
  school          School                  @relation(fields: [schoolId], references: [id])
  transactions    InventoryTransaction[]
  supplierId      Int?
  supplier        Supplier?               @relation(fields: [supplierId], references: [id])
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  
  @@index([schoolId])
  @@index([category])
  @@index([isActive])
  @@index([sku])
  @@index([barcode])
}

model InventoryTransaction {
  id              Int                     @id @default(autoincrement())
  itemId          Int
  item            InventoryItem           @relation(fields: [itemId], references: [id])
  type            String
  quantity        Int
  referenceNo     String?
  referenceType   String?
  referenceId     Int?
  notes           String?
  transactionDate DateTime                @default(now())
  schoolId        Int
  school          School                  @relation(fields: [schoolId], references: [id])
  createdById     Int
  createdBy       User                    @relation("InventoryTransactions", fields: [createdById], references: [id])
  supplierId      Int?
  supplier        Supplier?               @relation(fields: [supplierId], references: [id])
  createdAt       DateTime                @default(now())
  
  @@index([itemId])
  @@index([schoolId])
  @@index([createdById])
  @@index([type])
  @@index([referenceType, referenceId])
  @@index([transactionDate])
  @@index([supplierId])
}

model Supplier {
  id              Int                     @id @default(autoincrement())
  name            String
  contactPerson   String?
  email           String?
  phone           String?
  address         String?
  taxId           String?
  website         String?
  notes           String?
  isActive        Boolean                 @default(true)
  schoolId        Int
  school          School                  @relation(fields: [schoolId], references: [id])
  inventoryItems  InventoryItem[]
  transactions    InventoryTransaction[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  
  @@index([schoolId])
  @@index([isActive])
  @@index([email])
  @@index([phone])
}

// Forum Models
model Forum {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  slug            String            @unique
  isPublic        Boolean           @default(true)
  isActive        Boolean           @default(true)
  order           Int               @default(0)
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  categories      ForumCategory[]
  members         ForumMember[]
  topics          ForumTopic[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@index([schoolId])
  @@index([isPublic])
  @@index([isActive])
  @@index([order])
}

model ForumCategory {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  slug            String
  icon            String?
  order           Int               @default(0)
  isActive        Boolean           @default(true)
  forumId         Int
  forum           Forum             @relation(fields: [forumId], references: [id])
  parentId        Int?
  parent          ForumCategory?    @relation("Subcategories", fields: [parentId], references: [id])
  subcategories   ForumCategory[]   @relation("Subcategories")
  topics          ForumTopic[]
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@unique([forumId, slug])
  @@index([forumId])
  @@index([parentId])
  @@index([schoolId])
  @@index([isActive])
  @@index([order])
}

model ForumTopic {
  id              Int               @id @default(autoincrement())
  title           String
  slug            String
  content         String
  isPinned        Boolean           @default(false)
  isLocked        Boolean           @default(false)
  isApproved      Boolean           @default(true)
  viewCount       Int               @default(0)
  lastPostAt      DateTime?
  forumId         Int
  forum           Forum             @relation(fields: [forumId], references: [id])
  categoryId      Int
  category        ForumCategory     @relation(fields: [categoryId], references: [id])
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])
  lastPostId      Int?
  lastPost        ForumPost?        @relation("LastPost", fields: [lastPostId], references: [id])
  posts           ForumPost[]
  attachments     ForumAttachment[]
  subscribers     ForumTopicSubscription[]
  reports         ForumReport[]
  notifications   ForumNotification[]
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@unique([forumId, slug])
  @@index([forumId])
  @@index([categoryId])
  @@index([authorId])
  @@index([lastPostId])
  @@index([schoolId])
  @@index([isPinned])
  @@index([isLocked])
  @@index([isApproved])
  @@index([lastPostAt])
}

model ForumPost {
  id              Int               @id @default(autoincrement())
  content         String
  isFirstPost     Boolean           @default(false)
  isApproved      Boolean           @default(true)
  topicId         Int
  topic           ForumTopic        @relation(fields: [topicId], references: [id])
  authorId        Int
  author          User              @relation(fields: [authorId], references: [id])
  parentId        Int?
  parent          ForumPost?        @relation("Replies", fields: [parentId], references: [id])
  replies         ForumPost[]       @relation("Replies")
  likes           ForumPostLike[]
  attachments     ForumAttachment[]
  reports         ForumReport[]
  notifications   ForumNotification[]
  lastPostTopic   ForumTopic[]      @relation("LastPost")
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@index([topicId])
  @@index([authorId])
  @@index([parentId])
  @@index([schoolId])
  @@index([isFirstPost])
  @@index([isApproved])
  @@index([createdAt])
}

model ForumMember {
  id              Int               @id @default(autoincrement())
  forumId         Int
  forum           Forum             @relation(fields: [forumId], references: [id])
  userId          Int               @unique
  user            User              @relation(fields: [userId], references: [id])
  role            String            @default("member")
  joinDate        DateTime          @default(now())
  postCount       Int               @default(0)
  topicCount      Int               @default(0)
  lastPostAt      DateTime?
  signature       String?
  isBanned        Boolean           @default(false)
  banReason       String?
  banExpiresAt    DateTime?
  notifications   ForumNotification[]
  subscriptions   ForumTopicSubscription[]
  reports         ForumReport[]     @relation("ReportedBy")
  reportedReports ForumReport[]     @relation("ReportedMember")
  likes           ForumPostLike[]
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@unique([forumId, userId])
  @@index([forumId])
  @@index([userId])
  @@index([schoolId])
  @@index([role])
  @@index([isBanned])
  @@index([banExpiresAt])
}

model ForumTopicSubscription {
  id              Int               @id @default(autoincrement())
  topicId         Int
  topic           ForumTopic        @relation(fields: [topicId], references: [id])
  memberId        Int
  member          ForumMember       @relation(fields: [memberId], references: [id])
  isNotified      Boolean           @default(true)
  lastNotifiedAt  DateTime?
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@unique([topicId, memberId])
  @@index([topicId])
  @@index([memberId])
  @@index([schoolId])
}

model ForumPostLike {
  id              Int               @id @default(autoincrement())
  postId          Int
  post            ForumPost         @relation(fields: [postId], references: [id])
  memberId        Int
  member          ForumMember       @relation(fields: [memberId], references: [id])
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdAt       DateTime          @default(now())
  
  @@unique([postId, memberId])
  @@index([postId])
  @@index([memberId])
  @@index([schoolId])
}

model ForumAttachment {
  id              Int               @id @default(autoincrement())
  name            String
  path            String
  type            String?
  size            Int
  downloadCount   Int               @default(0)
  topicId         Int?
  topic           ForumTopic?       @relation(fields: [topicId], references: [id])
  postId          Int?
  post            ForumPost?        @relation(fields: [postId], references: [id])
  uploadedById    Int
  uploadedBy      User              @relation(fields: [uploadedById], references: [id])
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdAt       DateTime          @default(now())
  
  @@index([topicId])
  @@index([postId])
  @@index([uploadedById])
  @@index([schoolId])
}

model ForumReport {
  id              Int               @id @default(autoincrement())
  reason          String
  status          String            @default("pending")
  resolution      String?
  topicId         Int?
  topic           ForumTopic?       @relation(fields: [topicId], references: [id])
  postId          Int?
  post            ForumPost?        @relation(fields: [postId], references: [id])
  reportedById    Int
  reportedBy      ForumMember       @relation("ReportedBy", fields: [reportedById], references: [id])
  reportedMemberId Int?
  reportedMember  ForumMember?      @relation("ReportedMember", fields: [reportedMemberId], references: [id])
  resolvedById    Int?
  resolvedBy      User?             @relation("ResolvedReports", fields: [resolvedById], references: [id])
  resolvedAt      DateTime?
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@index([topicId])
  @@index([postId])
  @@index([reportedById])
  @@index([reportedMemberId])
  @@index([resolvedById])
  @@index([schoolId])
  @@index([status])
}

model ForumNotification {
  id              Int               @id @default(autoincrement())
  type            String
  isRead          Boolean           @default(false)
  memberId        Int
  member          ForumMember       @relation(fields: [memberId], references: [id])
  data            String?
  topicId         Int?
  topic           ForumTopic?       @relation(fields: [topicId], references: [id])
  postId          Int?
  post            ForumPost?        @relation(fields: [postId], references: [id])
  createdById     Int?
  createdBy       User?             @relation("CreatedForumNotifications", fields: [createdById], references: [id])
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdAt       DateTime          @default(now())
  
  @@index([memberId])
  @@index([topicId])
  @@index([postId])
  @@index([createdById])
  @@index([schoolId])
  @@index([isRead])
  @@index([createdAt])
}

// Analytics Models
model AnalyticsEvent {
  id              Int               @id @default(autoincrement())
  eventType       String
  eventData       String?
  ipAddress       String?
  userAgent       String?
  referrer        String?
  url             String?
  userId          Int?
  user            User?             @relation(fields: [userId], references: [id])
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdAt       DateTime          @default(now())
  
  @@index([eventType])
  @@index([userId])
  @@index([schoolId])
  @@index([createdAt])
}

model Report {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  type            String
  query           String
  format          String            @default("json")
  status          String            @default("pending")
  fileUrl         String?
  generatedById   Int?
  generatedBy     User?             @relation("GeneratedReports", fields: [generatedById], references: [id])
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  scheduleId      Int?              @unique
  schedule        ReportSchedule?   @relation(fields: [scheduleId], references: [id])
  executions      ReportExecution[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@index([schoolId])
  @@index([type])
  @@index([status])
  @@index([scheduleId])
  @@index([createdAt])
}

model ReportSchedule {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  frequency       String
  cronExpression  String?
  isActive        Boolean           @default(true)
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  reportId        Int               @unique
  report          Report            @relation(fields: [reportId], references: [id])
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdById     Int
  createdBy       User              @relation("CreatedReportSchedules", fields: [createdById], references: [id])
  updatedById     Int?
  updatedBy       User?             @relation("UpdatedReportSchedules", fields: [updatedById], references: [id])
  executions      ReportExecution[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@index([schoolId])
  @@index([isActive])
  @@index([nextRunAt])
  @@index([createdById])
  @@index([updatedById])
}

model ReportExecution {
  id              Int               @id @default(autoincrement())
  status          String            @default("pending")
  startedAt       DateTime?         @default(now())
  completedAt     DateTime?
  duration        Int?
  resultCount     Int?
  fileUrl         String?
  error           String?
  reportId        Int
  report          Report            @relation(fields: [reportId], references: [id])
  scheduleId      Int?
  schedule        ReportSchedule?   @relation(fields: [scheduleId], references: [id])
  initiatedById   Int?
  initiatedBy     User?             @relation("InitiatedReportExecutions", fields: [initiatedById], references: [id])
  schoolId        Int
  school          School            @relation(fields: [schoolId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@index([reportId])
  @@index([scheduleId])
  @@index([schoolId])
  @@index([status])
  @@index([startedAt])
  @@index([completedAt])
}

model AnalyticsSettings {
  id                      Int       @id @default(autoincrement())
  googleAnalyticsEnabled  Boolean   @default(false)
  googleAnalyticsId       String?   
  gtmEnabled             Boolean   @default(false)
  gtmId                  String?   
  facebookPixelEnabled   Boolean   @default(false)
  facebookPixelId        String?   
  hotjarEnabled          Boolean   @default(false)
  hotjarId               String?   
  mixpanelEnabled        Boolean   @default(false)
  mixpanelToken          String?   
  matomoEnabled          Boolean   @default(false)
  matomoUrl              String?   
  matomoSiteId           String?   
  customJs               String?
  customCss              String?
  headScripts            String?
  bodyScripts            String?
  schoolId               Int       @unique
  school                 School    @relation(fields: [schoolId], references: [id])
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  @@index([schoolId])
}

model SystemSettings {
  id                      Int       @id @default(autoincrement())
  maintenanceMode         Boolean   @default(false)
  maintenanceMessage      String?
  registrationEnabled     Boolean   @default(true)
  emailVerificationRequired Boolean @default(true)
  passwordResetEnabled    Boolean   @default(true)
  twoFactorAuthRequired   Boolean   @default(false)
  sessionTimeout          Int       @default(30)
  maxLoginAttempts        Int       @default(5)
  passwordMinLength       Int       @default(8)
  passwordRequireUppercase Boolean   @default(true)
  passwordRequireLowercase Boolean   @default(true)
  passwordRequireNumber   Boolean   @default(true)
  passwordRequireSpecial  Boolean   @default(true)
  passwordExpiryDays      Int?
  passwordReuseLimit      Int       @default(5)
  captchaEnabled          Boolean   @default(false)
  captchaType             String?
  captchaSiteKey          String?   
  captchaSecretKey        String?   
  schoolId                Int       @unique
  school                  School    @relation(fields: [schoolId], references: [id])
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  @@index([schoolId])
}

model NotificationSettings {
  id                      Int       @id @default(autoincrement())
  emailEnabled            Boolean   @default(true)
  smsEnabled              Boolean   @default(false)
  pushEnabled             Boolean   @default(true)
  defaultEmailTemplate    String?
  defaultSMSTemplate      String?
  defaultPushTemplate     String?
  schoolId                Int       @unique
  school                  School    @relation(fields: [schoolId], references: [id])
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  @@index([schoolId])
}

model SEOSettings {
  id                Int       @id @default(autoincrement())
  siteTitle         String?
  siteDescription   String?
  metaKeywords      String?
  googleAnalyticsId String?
  facebookPixelId   String?
  twitterCard       Boolean   @default(true)
  openGraph         Boolean   @default(true)
  schemaMarkup      String?
  robotsTxt         String?
  sitemapEnabled    Boolean   @default(true)
  canonicalUrl      String?
  schoolId          Int       @unique
  school            School    @relation(fields: [schoolId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([schoolId])
}

model SchoolSettings {
  id                      Int       @id @default(autoincrement())
  schoolId                Int       @unique
  school                  School    @relation(fields: [schoolId], references: [id])
  academicYear            String?
  academicYearStart       DateTime?
  academicYearEnd         DateTime?
  timezone                String?   @default("UTC")
  dateFormat              String?   @default("YYYY-MM-DD")
  timeFormat              String?   @default("12h")
  currency                String?   @default("USD")
  language                String?   @default("en")
  enable2FA               Boolean   @default(false)
  enableMaintenanceMode   Boolean   @default(false)
  maintenanceMessage      String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  @@index([schoolId])
}
